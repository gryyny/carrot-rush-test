var gdjs;(function(a){const g=new a.Logger("Multiplayer"),b=new a.Logger("Multiplayer - Debug");a.makeMultiplayerVariablesManager=()=>{const l={},d=function({variableNetworkId:r,previousVariableOwner:e,newVariableOwner:n}){if(l[r]){l[r].newVariableOwner=n;return}l[r]={variableName:r,previousVariableOwner:e,newVariableOwner:n}},m=function(r){const e=r.split("_");if(e.length<2)throw new Error("Trying to get the variable type from a network id that is not a valid variable network id.");return{type:e[0]==="game"?"global":"scene",name:e.slice(1).join("_"),containerId:e[0]}},h=function(r,e){const n=e.getVariables();if(n.hasVariable(r)){const i=e.networkId;if(!i){b.info("Variable is being synchronized but the scene has no networkId yet.");return}const s=n.getVariableNameInContainerByLoopingThroughAllVariables(r);if(!s){g.error("Variable is being synchronized but has no name.");return}return i+"_"+s}const o=e.getGame().getVariables();if(o.hasVariable(r)){const i=o.getVariableNameInContainerByLoopingThroughAllVariables(r);if(!i){g.error("Variable is being synchronized but has no name.");return}return"game_"+i}g.error("Trying to modify synchronization of a variable that is not a scene or global variable.")},w=function(r,e){return e.getPlayerOwnership()},c=function(r,e,n){if(b.info(`Setting ownership of variable to player ${n}.`),n<0){g.error("Invalid player number ("+n+") when setting ownership of a variable.");return}const t=e.getPlayerOwnership();if(t===null){g.error("Cannot change ownership of a variable that is not synchronized.");return}e.setPlayerOwnership(n);const o=a.multiplayer.getCurrentPlayerNumber();if(!a.multiplayer.isLobbyGameRunning()||n!==o)return;const i=h(e,r),s=r.networkId;if(!i||!s)return;const{type:u}=m(i);b.info(`Adding variable to be synchronized: ${i} (type: ${u}) from owner ${t} to ${n}.`),d({variableNetworkId:i,previousVariableOwner:t,newVariableOwner:n})};return{getVariableTypeAndNameFromNetworkId:m,getPlayerVariableOwnership:w,setPlayerVariableOwnership:c,takeVariableOwnership:function(r,e){const n=a.multiplayer.getCurrentPlayerNumber();c(r,e,n)},removeVariableOwnership:function(r,e){c(r,e,0)},disableVariableSynchronization:function(r,e){e.disableSynchronization()},handleChangeVariableOwnerMessagesToSend:function(){if(!a.multiplayer.isLobbyGameRunning())return;const r=a.multiplayer.getCurrentPlayerNumber();for(const e in l){const n=l[e],{messageName:t,messageData:o}=a.multiplayerMessageManager.createChangeVariableOwnerMessage({variableNetworkId:e,variableOwner:n.previousVariableOwner,newVariableOwner:n.newVariableOwner});if(n.newVariableOwner===r){const s=a.evtTools.p2p.getAllPeers(),u=a.multiplayerMessageManager.createVariableOwnerChangedMessageNameFromChangeVariableOwnerMessage(t);a.multiplayerMessageManager.addExpectedMessageAcknowledgement({originalMessageName:t,originalData:o,expectedMessageName:u,otherPeerIds:s,shouldCancelMessageIfTimesOut:r!==1})}b.info("Sending change owner message",t);const i=a.evtTools.p2p.getAllPeers();for(const s of i)a.multiplayerMessageManager.sendDataTo(s,t,o);delete l[e]}}}},a.multiplayerVariablesManager=a.makeMultiplayerVariablesManager()})(gdjs||(gdjs={}));
//# sourceMappingURL=multiplayerVariablesManager.js.map
